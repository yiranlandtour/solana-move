{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "CrossChain DSL",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ccdsl",
          "match": "//.*$"
        },
        {
          "name": "comment.block.ccdsl",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ccdsl",
          "match": "\\b(if|else|while|for|return|break|continue)\\b"
        },
        {
          "name": "keyword.declaration.ccdsl",
          "match": "\\b(contract|state|public|private|fn|let|const|mut)\\b"
        },
        {
          "name": "keyword.other.ccdsl",
          "match": "\\b(require|emit|assert|revert|self|msg_sender)\\b"
        },
        {
          "name": "constant.language.ccdsl",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ccdsl",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ccdsl",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.ccdsl",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.ccdsl",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.ccdsl",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.ccdsl",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.decimal.ccdsl",
          "match": "\\b[0-9]+(\\.?[0-9]+)?\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.ccdsl",
          "match": "\\b(u8|u16|u32|u64|u128|u256|i8|i16|i32|i64|i128|bool|address|string)\\b"
        },
        {
          "name": "support.type.collection.ccdsl",
          "match": "\\b(map|vec|array|set)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.ccdsl",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.ccdsl",
          "match": "\\+|\\-|\\*|\\/|\\%"
        },
        {
          "name": "keyword.operator.comparison.ccdsl",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.ccdsl",
          "match": "\\&\\&|\\|\\||\\!"
        },
        {
          "name": "keyword.operator.assignment.ccdsl",
          "match": "=|\\+=|\\-=|\\*=|\\/=|\\%="
        },
        {
          "name": "keyword.operator.access.ccdsl",
          "match": "\\.|\\[|\\]|::"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.ccdsl",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  },
  "scopeName": "source.ccdsl"
}